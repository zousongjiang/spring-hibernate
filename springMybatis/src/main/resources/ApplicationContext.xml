<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans   
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd   
    http://www.springframework.org/schema/tx   
    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd   
    http://www.springframework.org/schema/aop    
    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">
    
	<context:component-scan base-package="org.project"/>
	<context:property-placeholder location="classpath:mysql.properties" ignore-resource-not-found="true" ignore-unresolvable="true" />
	<!-- destroy-method="colse" 是指当连接池被 关闭时 调用colse方法 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" >
	<property name="driverClassName" value="${driver}"></property>
	<property name="url" value="${url}"></property>
	<property name="username" value="${jdbc.username}"></property>
	<property name="password" value="${jdbc.password}"></property>
	
	<!-- 初始连接数 -->
	<property name="initialSize" value="15"></property>
	
	<!-- 最大连接数 -->
	<property name="maxActive" value="50"></property>
	
	<!-- 空闲的最小连接数 -->
	<property name="minIdle" value="1"></property>
	
	<!-- 空闲的最大连接数 -->
	<property name="maxIdle" value="20" ></property>
	
	<!-- 不允许自动提交 -->
	<property name="defaultAutoCommit" value="false"></property>
	<!-- 连接超时时间（秒） -->
	<property name="removeAbandonedTimeout" value="10"></property>
	<!-- 是否回收超时连接 -->
	<property name="removeAbandoned" value="true"></property>
	<!-- 对于超时连接 是否记录日志 -->
	<property name="logAbandoned" value="true"></property>
	<!-- 空闲连接回归连接池时 需要检查活跃区 连接数 是否够15根 -->
	<property name="numTestsPerEvictionRun" value="15"></property>
	</bean>
	<!-- 配置sessionfactory -->
	<bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	<property name="dataSource" ref="dataSource"></property>
	<!-- typeAliasesPackage 该属性主要是用于设置自动扫描 给类取类的别名 
	如果只有一个包，那么直接输入包的路径
	如果超过一个包，那么包的路径通过，或者 ； 间隔开。
	 -->
	<property name="typeAliasesPackage" value="org.project.springMybatis.beans"></property>
	</bean>
	<!-- 配置Sql映射器 自动扫描组件 -->
	<bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	<property name="basePackage" value="org.project.springMybatis.usermag.mapper"></property>
	<!-- 将扫描出来的sqlmapper 配置文件， 或者是注解 与session工厂连接起来 为sqlmapper接口产生动态代理对象-->
	<property name="sqlSessionFactoryBeanName" value="sessionFactory"></property>
	</bean>
	<!--配置事务管理器  -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	 <property name="dataSource" ref="dataSource"></property>
	</bean>
	<!-- spring容器管理事务的方式 编程式和声明式 -->
	<!-- 声明式：将事务能力声明在配置文件中，而不是耦合在业务方法中，这种模式我们称之为声明式
	声明式的第一种：注解管理方案
	tx:annotation-driven 开启spring注解支持事务
	
	 @Transactional(readOnly=false,rollbackFor=Exception.class,isolation=Isolation.REPEATABLE_READ,propagation=Propagation.REQUIRED)
	 
	 <tx:annotation-driven transaction-manager="txManage"/>
	-->
	<!-- 声明式事务管理 第二种管理方案 使用切面管理事务（使用较为频繁） -->
	<!-- 先定义通知 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
       
        <tx:attributes>
            <!-- 表示所有方法连接都是只读的-->
            <tx:method name="*" read-only="true"/>
            <!-- other methods use the default transaction settings (see below) -->
            <tx:method name="add*" read-only="false" rollback-for="java.lang.Exception" isolation="DEFAULT" propagation="REQUIRED"/>
            <tx:method name="delete*" read-only="false" rollback-for="java.lang.Exception" isolation="DEFAULT" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>
	
	<!-- 然后在定义切入点表达式，并与通知进行关联 -->
	<aop:config>
        <aop:pointcut id="fooServiceOperation" expression="execution(public * org.project.springMybatis.*mag.service.impl.*Impl.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="fooServiceOperation"/>
    </aop:config>
	 
	
	
	
</beans>